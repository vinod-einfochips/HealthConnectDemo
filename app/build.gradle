plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jlleitschuh.gradle.ktlint'
}

android {
    namespace 'com.example.healthconnectdemo'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.healthconnectdemo"
        minSdk 26
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    // Product Flavors for different environments
    flavorDimensions = ["environment"]
    
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            
            buildConfigField "String", "BASE_URL", '"https://dev-api.healthconnect.com"'
            buildConfigField "String", "ENVIRONMENT", '"DEV"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "false"
            
            resValue "string", "app_name", "Health Connect (Dev)"
            manifestPlaceholders = [
                appIcon: "@mipmap/ic_launcher_dev"
            ]
        }
        
        qa {
            dimension "environment"
            applicationIdSuffix ".qa"
            versionNameSuffix "-qa"
            
            buildConfigField "String", "BASE_URL", '"https://qa-api.healthconnect.com"'
            buildConfigField "String", "ENVIRONMENT", '"QA"'
            buildConfigField "boolean", "ENABLE_LOGGING", "true"
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "true"
            
            resValue "string", "app_name", "Health Connect (QA)"
            manifestPlaceholders = [
                appIcon: "@mipmap/ic_launcher_qa"
            ]
        }
        
        prod {
            dimension "environment"
            
            buildConfigField "String", "BASE_URL", '"https://api.healthconnect.com"'
            buildConfigField "String", "ENVIRONMENT", '"PRODUCTION"'
            buildConfigField "boolean", "ENABLE_LOGGING", "false"
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "true"
            
            resValue "string", "app_name", "Health Connect"
            manifestPlaceholders = [
                appIcon: "@mipmap/ic_launcher"
            ]
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            
            buildConfigField "boolean", "DEBUG_MODE", "true"
            
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            
            buildConfigField "boolean", "DEBUG_MODE", "false"
            
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Signing config would go here
            // signingConfig signingConfigs.release
        }
    }
    
    // Build variant naming
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def flavor = variant.flavorName
            def buildType = variant.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date().format('yyyyMMdd-HHmm')
            
            outputFileName = "HealthConnect-${flavor}-${buildType}-v${versionName}-${versionCode}-${date}.apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                useJUnitPlatform()
                testLogging {
                    events "passed", "skipped", "failed"
                    exceptionFormat "full"
                }
            }
        }
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    
    // Edge to Edge support
    implementation 'androidx.core:core-splashscreen:1.0.1'
    
    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.4'
    implementation 'androidx.activity:activity-ktx:1.9.1'
    implementation 'androidx.fragment:fragment-ktx:1.8.2'

    // Health Connect
    implementation "androidx.health.connect:connect-client:$health_connect_version"

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.50'
    kapt 'com.google.dagger:hilt-compiler:2.50'

    // Testing - JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'com.google.dagger:hilt-android-testing:2.50'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    kaptTest 'com.google.dagger:hilt-compiler:2.50'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

kapt {
    correctErrorTypes = true
}

// Ktlint Configuration
ktlint {
    version = "1.0.1"
    android = true
    ignoreFailures = false
    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "html"
        reporter "json"
    }
    filter {
        exclude("**/generated/**")
        exclude("**/build/**")
    }
    outputToConsole = true
    outputColorName = "RED"
}
